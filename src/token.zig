pub const TokenTag = enum {
    // Control symbols
    open_tag,
    open_tag_with_echo,
    short_open_tag,
    close_tag,
    left_paren,
    right_paren,
    left_brace,
    right_brace,
    semicolon,
    illegal,
    left_bracket,
    right_bracket,

    // Delimiters
    comma,

    // End of file
    eof,

    // Literals
    string_single_quote_literal,
    string_double_quote_literal,
    integer_literal,
    float_literal,
    bool_literal,

    // Identifiers and types
    variable,
    ident,
    integer_t,
    string_t,
    float_t,
    bool_t,
    type_,

    // Keywords
    function,
    fn_,
    class,
    interface,
    trait,
    namespace,
    use,
    const_,
    var_,
    public,
    protected,
    private,
    static,
    abstract,
    final,
    extends,
    implements,
    return_,
    if_,
    else_,
    elseif,
    while_,
    do_,
    for_,
    foreach,
    switch_,
    case,
    default,
    break_,
    match,
    continue_,
    goto,
    throw,
    try_,
    catch_,
    finally,
    yield,
    as,
    instanceof,
    insteadof,
    global,
    declare,
    echo,
    print,
    include,
    include_once,
    require,
    require_once,

    // Operators
    plus,
    minus,
    assign,

    // Special operators
    colon,
    double_colon,
    object_operator,
    null_safe_object_operator,
    coalesce,
    double_arrow,
    elipsis,
};

pub const Token = union(TokenTag) {
    // Control symbols
    open_tag: void,
    open_tag_with_echo: void,
    short_open_tag: void,
    close_tag: void,
    left_paren: void,
    right_paren: void,
    left_brace: void,
    right_brace: void,
    semicolon: void,
    illegal: void,
    left_bracket: void,
    right_bracket: void,

    // Delimiters
    comma: void,

    // End of file
    eof: void,

    string_single_quote_literal: []const u8,
    string_double_quote_literal: []const u8,
    integer_literal: []const u8,
    float_literal: []const u8,
    bool_literal: []const u8,

    variable: []const u8,
    ident: []const u8,

    // Type system
    integer_t: void,
    string_t: void,
    float_t: void,
    bool_t: void,
    type_: void,

    // Keywords
    function: void,
    fn_: void,
    class: void,
    interface: void,
    trait: void,
    namespace: void,
    use: void,
    const_: void,
    var_: void,
    public: void,
    protected: void,
    private: void,
    static: void,
    abstract: void,
    final: void,
    extends: void,
    implements: void,
    return_: void,
    if_: void,
    else_: void,
    elseif: void,
    while_: void,
    do_: void,
    for_: void,
    foreach: void,
    switch_: void,
    case: void,
    default: void,
    break_: void,
    match: void,
    continue_: void,
    goto: void,
    throw: void,
    try_: void,
    catch_: void,
    finally: void,
    yield: void,
    as: void,
    instanceof: void,
    insteadof: void,
    global: void,
    declare: void,
    echo: void,
    print: void,
    include: void,
    include_once: void,
    require: void,
    require_once: void,

    // Operators
    plus: void,
    minus: void,
    assign: void,

    // Special operators
    colon: void,
    double_colon: void,
    object_operator: void,
    null_safe_object_operator: void,
    coalesce: void,
    double_arrow: void,
    elipsis: void,
};
